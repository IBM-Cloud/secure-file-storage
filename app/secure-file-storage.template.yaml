apiVersion: v1
kind: Service
metadata:
  name: secure-file-storage-service
  namespace: $TARGET_NAMESPACE
spec:
  ports:
  - port: 8081
    targetPort: 8081
    protocol: TCP
  type: ClusterIP
  selector:
    app: secure-file-storage
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: secure-file-storage-deployment
  namespace: $TARGET_NAMESPACE
spec:
  selector:
    matchLabels:
      app: secure-file-storage
  replicas: 1
  template:
    metadata:
      labels:
        app: secure-file-storage
    spec:
# Uncomment only if you are not deploying to the default namespace
# In this case, make sure to create a Docker registry secret
#      imagePullSecrets:
#        - name: $IMAGE_PULL_SECRET
      containers:
      - name: secure-file-storage-container
        image: $IMAGE_REPOSITORY:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8081
        envFrom:
         - secretRef:
            name: $BASENAME-credentials
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-for-secure-file-storage
  namespace: $TARGET_NAMESPACE
  annotations:
    kubernetes.io/ingress.class: "public-iks-k8s-nginx"
    nginx.ingress.kubernetes.io/auth-url: https://$host/oauth2-$BASENAME-appid/auth
    nginx.ingress.kubernetes.io/auth-signin: https://$host/oauth2-$BASENAME-appid/start?rd=$escaped_request_uri
    nginx.ingress.kubernetes.io/configuration-snippet: |
      auth_request_set $access_token $upstream_http_x_auth_request_access_token;
      auth_request_set $id_token $upstream_http_authorization;
      access_by_lua_block {
        if ngx.var.id_token ~= "" and ngx.var.access_token ~= "" then
          ngx.req.set_header("Authorization", "Bearer " .. ngx.var.access_token .. " " .. ngx.var.id_token:match("%s*Bearer%s*(.*)"))
        end
      }
spec:
  tls:
  - hosts:
    - secure-file-storage.$INGRESS_SUBDOMAIN
    secretName: $INGRESS_SECRET
# Uncomment below if you are using a custom domain
#   - hosts:
#     - secure-file-storage.<your custom domain>
#     secretName: secure-file-storage-certificate
  rules:
  - host: secure-file-storage.$INGRESS_SUBDOMAIN
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: secure-file-storage-service
            port: 
              number: 8081
# Uncomment below if you are using a custom domain
#   - host: secure-file-storage.<your custom domain>
#     http:
#       paths:
#       - path: /
#         pathType: Prefix
#         backend:
#           service:
#             name: secure-file-storage-service
#             port:
#               number: 8081
